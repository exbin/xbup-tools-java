/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.editor.xbup.viewer.gui;

import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.swing.JPopupMenu;
import org.exbin.framework.XBFrameworkUtils;
import org.exbin.framework.editor.xbup.viewer.DocumentItemSelectionListener;
import org.exbin.framework.editor.xbup.viewer.XbupTreeDocument;
import org.exbin.framework.utils.LanguageUtils;
import org.exbin.framework.utils.WindowUtils;
import org.exbin.xbup.core.block.XBTBlock;

/**
 * Block child list panel.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class XBBlockListPanel extends javax.swing.JPanel {

    private final java.util.ResourceBundle resourceBundle = LanguageUtils.getResourceBundleByClass(XBBlockListPanel.class);

    private Mode mode = Mode.TABLE;
    private XBBlockTablePanel blockTablePanel = new XBBlockTablePanel();
    private final List<DocumentItemSelectionListener> itemSelectionListeners = new ArrayList<>();
    private XbupTreeDocument treeDocument;

    public XBBlockListPanel() {
        initComponents();

        init();
    }

    private void init() {
        toolBar.setFloatable(false);
        add(blockTablePanel, BorderLayout.CENTER);
        blockTablePanel.addItemSelectionListener((item) -> {
            if (mode == Mode.TABLE) {
                notifyItemSelectionChanged(item);
            }
        });
    }

    public void setTreeDocument(XbupTreeDocument treeDocument) {
        this.treeDocument = treeDocument;
        blockTablePanel.setTreeDocument(treeDocument);
        
    }

    public void setBlock(@Nullable XBTBlock block) {
        blockTablePanel.setBlock(block);
    }

    @Nonnull
    public Optional<XBTBlock> getSelectedItem() {
        switch (mode) {
            case ICON_MATRIX: {
                return Optional.empty();
            }
            case NAMES_LIST: {
                return Optional.empty();
            }
            case TABLE: {
                return blockTablePanel.getSelectedItem();
            }

            default:
                throw XBFrameworkUtils.getInvalidTypeException(mode);
        }
    }

    public void addItemSelectionListener(DocumentItemSelectionListener listener) {
        itemSelectionListeners.add(listener);
    }

    public void removeItemSelectionListener(DocumentItemSelectionListener listener) {
        itemSelectionListeners.remove(listener);
    }

    public void setPopupMenu(JPopupMenu popupMenu) {
        blockTablePanel.setPopupMenu(popupMenu);
    }

    private void notifyItemSelectionChanged(@Nullable XBTBlock item) {
        for (DocumentItemSelectionListener listener : itemSelectionListeners) {
            listener.itemSelected(item);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        modeButtonGroup = new javax.swing.ButtonGroup();
        toolBar = new javax.swing.JToolBar();
        iconMatrixToggleButton = new javax.swing.JToggleButton();
        namesListToggleButton = new javax.swing.JToggleButton();
        tableToggleButton = new javax.swing.JToggleButton();

        setLayout(new java.awt.BorderLayout());

        modeButtonGroup.add(iconMatrixToggleButton);
        iconMatrixToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exbin/framework/editor/xbup/resources/icons/open_icon_library-standard/icons/png/16x16/actions/view-list-icon-4.png"))); // NOI18N
        iconMatrixToggleButton.setEnabled(false);
        iconMatrixToggleButton.setFocusable(false);
        iconMatrixToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        iconMatrixToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        iconMatrixToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iconMatrixToggleButtonActionPerformed(evt);
            }
        });
        toolBar.add(iconMatrixToggleButton);

        modeButtonGroup.add(namesListToggleButton);
        namesListToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exbin/framework/editor/xbup/resources/icons/open_icon_library-standard/icons/png/16x16/actions/view-list-details-6.png"))); // NOI18N
        namesListToggleButton.setEnabled(false);
        namesListToggleButton.setFocusable(false);
        namesListToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        namesListToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        namesListToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namesListToggleButtonActionPerformed(evt);
            }
        });
        toolBar.add(namesListToggleButton);

        modeButtonGroup.add(tableToggleButton);
        tableToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/exbin/framework/editor/xbup/resources/icons/open_icon_library-standard/icons/png/16x16/actions/table.png"))); // NOI18N
        tableToggleButton.setSelected(true);
        tableToggleButton.setEnabled(false);
        tableToggleButton.setFocusable(false);
        tableToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tableToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tableToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableToggleButtonActionPerformed(evt);
            }
        });
        toolBar.add(tableToggleButton);

        add(toolBar, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void iconMatrixToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iconMatrixToggleButtonActionPerformed
        setMode(Mode.ICON_MATRIX);
    }//GEN-LAST:event_iconMatrixToggleButtonActionPerformed

    private void namesListToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namesListToggleButtonActionPerformed
        setMode(Mode.NAMES_LIST);
    }//GEN-LAST:event_namesListToggleButtonActionPerformed

    private void tableToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableToggleButtonActionPerformed
        setMode(Mode.TABLE);
    }//GEN-LAST:event_tableToggleButtonActionPerformed

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        WindowUtils.invokeDialog(new XBBlockListPanel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton iconMatrixToggleButton;
    private javax.swing.ButtonGroup modeButtonGroup;
    private javax.swing.JToggleButton namesListToggleButton;
    private javax.swing.JToggleButton tableToggleButton;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables

    @Nonnull
    public Mode getMode() {
        return mode;
    }

    public void setMode(Mode mode) {
        if (this.mode == mode) {
            return;
        }

        this.mode = mode;
    }

    public enum Mode {
        ICON_MATRIX,
        NAMES_LIST,
        TABLE
    }
}
