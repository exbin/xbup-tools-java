/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.editor.xbup.gui;

import org.exbin.framework.editor.xbup.viewer.DocumentItemSelectionListener;
import java.awt.event.ActionListener;
import java.awt.event.FocusListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPopupMenu;
import javax.swing.event.ChangeEvent;
import org.exbin.framework.api.XBApplication;
import org.exbin.framework.editor.xbup.EditorXbupModule;
import org.exbin.framework.editor.xbup.viewer.DocumentTab;
import org.exbin.framework.editor.xbup.viewer.DocumentTabSelectionListener;
import org.exbin.framework.editor.xbup.viewer.ViewerTab;
import org.exbin.framework.utils.LanguageUtils;
import org.exbin.framework.utils.WindowUtils;
import org.exbin.xbup.core.block.XBTBlock;
import org.exbin.xbup.operation.undo.XBUndoHandler;
import org.exbin.xbup.parser_tree.XBTTreeNode;
import org.exbin.xbup.plugin.XBPluginRepository;
import org.exbin.xbup.core.catalog.XBACatalog;
import org.exbin.xbup.parser_tree.XBTTreeDocument;

/**
 * Panel for document visualization.
 *
 * @version 0.2.1 2020/09/21
 * @author ExBin Project (http://exbin.org)
 */
public class XBDocumentPanel extends javax.swing.JPanel {

    private final java.util.ResourceBundle resourceBundle = LanguageUtils.getResourceBundleByClass(XBDocumentPanel.class);

    private boolean showPropertiesPanel = false;

    private final XBDocTreePanel treePanel;

    private XBPluginRepository pluginRepository;

    private final List<DocumentTabSelectionListener> tabSwitchListeners = new ArrayList<>();
//    private ClipboardActionsUpdateListener clipboardActionsUpdateListener;

    public XBDocumentPanel() {

        initComponents();

        treePanel = new XBDocTreePanel();

//        ((JPanel) mainTabbedPane.getComponentAt(0)).add(treePanel, java.awt.BorderLayout.CENTER);
        mainSplitPane.setLeftComponent(treePanel);
        mainSplitPane.setRightComponent(mainTabbedPane);
        setShowPropertiesPanel(true);
        mainTabbedPane.addChangeListener((ChangeEvent e) -> {
            int selectedIndex = mainTabbedPane.getSelectedIndex();
            ViewerTab viewerTab = ViewerTab.values()[selectedIndex];
            for (DocumentTabSelectionListener listener : tabSwitchListeners) {
                listener.tabSelected(viewerTab);
            }
        });
        //updateItem();
    }

    public void setApplication(XBApplication application) {
        treePanel.setApplication(application);

        EditorXbupModule xbupModule = application.getModuleRepository().getModuleByInterface(EditorXbupModule.class);
        setPopupMenu(xbupModule.getItemPopupMenu());
    }

    public void setCatalog(XBACatalog catalog) {
        treePanel.setCatalog(catalog);
    }

    public void setUndoHandler(XBUndoHandler undoHandler) {
        treePanel.setUndoHandler(undoHandler);
    }

    public void postWindowOpened() {
        mainSplitPane.setDividerLocation(getWidth() - 300 > 0 ? getWidth() - 300 : getWidth() / 3);
    }

    public void addTabComponent(ViewerTab viewerTab, DocumentTab tab) {
        String tabTitle = resourceBundle.getString("documentTab" + viewerTab.ordinal() + ".title");
        mainTabbedPane.add(tabTitle, tab.getComponent());
    }

//    /**
//     * Updating selected item available operations status, like add, edit,
//     * delete.
//     */
//    public void updateItem() {
//        treePanel.updateItemStatus();
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu = new javax.swing.JPopupMenu();
        popupItemViewMenuItem = new javax.swing.JMenuItem();
        popupItemCopyMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        popupItemPropertiesMenuItem = new javax.swing.JMenuItem();
        mainTabbedPane = new javax.swing.JTabbedPane();
        mainSplitPane = new javax.swing.JSplitPane();

        popupItemViewMenuItem.setText(resourceBundle.getString("popupItemViewMenuItem.text")); // NOI18N
        popupItemViewMenuItem.setToolTipText(resourceBundle.getString("popupItemViewMenuItem.toolTipText")); // NOI18N
        popupItemViewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupItemViewMenuItemActionPerformed(evt);
            }
        });
        popupMenu.add(popupItemViewMenuItem);

        popupItemCopyMenuItem.setText(resourceBundle.getString("popupItemCopyMenuItem.text")); // NOI18N
        popupItemCopyMenuItem.setToolTipText(resourceBundle.getString("popupItemCopyMenuItem.toolTipText")); // NOI18N
        popupItemCopyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupItemCopyMenuItemActionPerformed(evt);
            }
        });
        popupMenu.add(popupItemCopyMenuItem);
        popupMenu.add(jSeparator1);

        popupItemPropertiesMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.ALT_DOWN_MASK));
        popupItemPropertiesMenuItem.setText(resourceBundle.getString("popupItemPropertiesMenuItem.text")); // NOI18N
        popupItemPropertiesMenuItem.setToolTipText(resourceBundle.getString("popupItemPropertiesMenuItem.toolTipText")); // NOI18N
        popupItemPropertiesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupItemPropertiesMenuItemActionPerformed(evt);
            }
        });
        popupMenu.add(popupItemPropertiesMenuItem);

        mainTabbedPane.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        mainTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mainTabbedPaneStateChanged(evt);
            }
        });

        setLayout(new java.awt.BorderLayout());

        mainSplitPane.setBorder(null);
        mainSplitPane.setDividerLocation(200);
        add(mainSplitPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void popupItemPropertiesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupItemPropertiesMenuItemActionPerformed
        throw new UnsupportedOperationException("Not supported yet.");
        // actionItemProperties();
    }//GEN-LAST:event_popupItemPropertiesMenuItemActionPerformed

    private void popupItemViewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupItemViewMenuItemActionPerformed
        throw new UnsupportedOperationException("Not supported yet.");
        // performModify();
    }//GEN-LAST:event_popupItemViewMenuItemActionPerformed

    private void popupItemCopyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupItemCopyMenuItemActionPerformed
        throw new UnsupportedOperationException("Not supported yet.");
        // performCopy();
    }//GEN-LAST:event_popupItemCopyMenuItemActionPerformed

    private void mainTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mainTabbedPaneStateChanged
//        throw new UnsupportedOperationException("Not supported yet.");
        // updateActiveViewer();
//        JComponent viewerComponent = activeViewer.getComponent();
//        viewerComponent.requestFocus();
//        mainTabbedPane.setSelectedComponent(viewerComponent);

//        mainTabbedPane.addT  setTabComponentAt(mainTabbedPane.getSelectedIndex(), viewerComponent);
        // setMode(PanelMode.values()[mainTabbedPane.getSelectedIndex()]);
    }//GEN-LAST:event_mainTabbedPaneStateChanged

    public XBTTreeNode getSelectedItem() {
        return treePanel.getSelectedItem();
    }

    public void reportStructureChange(XBTBlock block) {
        treePanel.reportStructureChange(block);
    }

//    public boolean isPasteEnabled() {
//        return treePanel.isPasteEnabled();
//    }
    public void addUpdateListener(ActionListener listener) {
        treePanel.addUpdateListener(listener);
    }

    public void removeUpdateListener(ActionListener listener) {
        treePanel.removeUpdateListener(listener);
    }

    public void switchToTab(ViewerTab selectedTab) {
        mainTabbedPane.setSelectedIndex(selectedTab.ordinal());
    }

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        WindowUtils.invokeDialog(new XBDocumentPanel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSplitPane mainSplitPane;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JMenuItem popupItemCopyMenuItem;
    private javax.swing.JMenuItem popupItemPropertiesMenuItem;
    private javax.swing.JMenuItem popupItemViewMenuItem;
    private javax.swing.JPopupMenu popupMenu;
    // End of variables declaration//GEN-END:variables

//    public void setEditEnabled(boolean editEnabled) {
//        treePanel.setEditEnabled(editEnabled);
//    }
//
//    public void setAddEnabled(boolean addEnabled) {
//        treePanel.setAddEnabled(addEnabled);
//    }
    public void updateUndoAvailable() {
        firePropertyChange("undoAvailable", false, true);
        firePropertyChange("redoAvailable", false, true);
    }

    public XBUndoHandler getUndoHandler() {
        return treePanel.getUndoHandler();
    }

    public void printFile() {
        throw new UnsupportedOperationException("Not supported yet.");
        // textPanel.printFile();
    }

    public void setShowPropertiesPanel(boolean showPropertiesPanel) {
        if (this.showPropertiesPanel != showPropertiesPanel) {
//            if (showPropertiesPanel) {
//                viewSplitPane.setLeftComponent(mainTabbedPane);
//                viewSplitPane.setRightComponent(propertyPanel);
//                mainSplitPane.setRightComponent(viewSplitPane);
//            } else {
            mainSplitPane.setRightComponent(mainTabbedPane);
//            }

            this.showPropertiesPanel = showPropertiesPanel;
        }
    }

//    public ActivePanelActionHandling getActivePanel() {
//        int selectedIndex = mainTabbedPane.getSelectedIndex();
//        return (ActivePanelActionHandling) getPanel(selectedIndex);
//    }
    public boolean isShowPropertiesPanel() {
        return showPropertiesPanel;
    }

    public XBPluginRepository getPluginRepository() {
        return pluginRepository;
    }

    public void setPluginRepository(XBPluginRepository pluginRepository) {
        this.pluginRepository = pluginRepository;
    }

    public void setPropertyChangeListener(PropertyChangeListener propertyChangeListener) {
        // this.propertyChangeListener = propertyChangeListener;
        treePanel.addPropertyChangeListener((PropertyChangeEvent evt) -> {
            firePropertyChange(evt.getPropertyName(), evt.getOldValue(), evt.getNewValue());
            if (propertyChangeListener != null) {
                propertyChangeListener.propertyChange(evt);
            }
        });

        super.addPropertyChangeListener((PropertyChangeEvent evt) -> {
            if (propertyChangeListener != null) {
                propertyChangeListener.propertyChange(evt);
            }
        });
    }

    public JPopupMenu getPopupMenu() {
        return popupMenu;
    }

    public void setPopupMenu(JPopupMenu popupMenu) {
        this.popupMenu = popupMenu;
        treePanel.setPopupMenu(popupMenu);
    }

    public void setMainDoc(XBTTreeDocument mainDoc) {
        treePanel.setMainDoc(mainDoc);
    }

    public void addItemSelectionListener(DocumentItemSelectionListener listener) {
        treePanel.addItemSelectionListener(listener);
    }

    public void removeItemSelectionListener(DocumentItemSelectionListener listener) {
        treePanel.removeItemSelectionListener(listener);
    }

    public void addTabSwitchListener(DocumentTabSelectionListener listener) {
        tabSwitchListeners.add(listener);
    }

    public void removeTabSwitchListener(DocumentTabSelectionListener listener) {
        tabSwitchListeners.remove(listener);
    }

    public void performSelectAll() {
        treePanel.performSelectAll();
    }

    public boolean hasSelection() {
        return treePanel.hasSelection();
    }

    public void addTreeFocusListener(FocusListener focusListener) {
        treePanel.addTreeFocusListener(focusListener);
    }

    public void removeTreeFocusListener(FocusListener focusListener) {
        treePanel.removeTreeFocusListener(focusListener);
    }
}
