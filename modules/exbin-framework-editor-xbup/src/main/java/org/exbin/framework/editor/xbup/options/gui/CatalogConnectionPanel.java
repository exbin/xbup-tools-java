/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.editor.xbup.options.gui;

import java.util.ResourceBundle;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import org.exbin.framework.editor.xbup.options.impl.CatalogConnectionOptionsImpl;
import org.exbin.framework.utils.WindowUtils;
import org.exbin.framework.options.api.OptionsCapable;
import org.exbin.framework.options.api.OptionsModifiedListener;
import org.exbin.framework.utils.LanguageUtils;

/**
 * Catalog connection options panel.
 *
 * @version 0.2.1 2019/07/20
 * @author ExBin Project (http://exbin.org)
 */
@ParametersAreNonnullByDefault
public class CatalogConnectionPanel extends javax.swing.JPanel implements OptionsCapable<CatalogConnectionOptionsImpl> {

    private final ResourceBundle resourceBundle = LanguageUtils.getResourceBundleByClass(CatalogConnectionPanel.class);
    private OptionsModifiedListener optionsModifiedListener;
    public final String DEFAULT_CATALOG_UPDATE_CONNECTION = "";
    // private XBTextEditorFrame frame;

    public CatalogConnectionPanel() {
        initComponents();
    }

    @Nonnull
    @Override
    public ResourceBundle getResourceBundle() {
        return resourceBundle;
    }

    @Override
    public void loadFromOptions(CatalogConnectionOptionsImpl options) {
        if (options.isServiceConnectionAllowed() != serviceConnectionCheckBox.isSelected()) {
            serviceConnectionCheckBox.doClick();
        }

        String serviceConnection = options.getServiceConnectionUrl().orElse(null);
        serviceConnectionTextField.setText(serviceConnection);

        if (options.isCatalogUpdateAllowed() != catalogUpdateConnectionCheckBox.isSelected()) {
            catalogUpdateConnectionCheckBox.doClick();
        }

        String catalogUpdate = options.getCatalogUpdateUrl().orElse(null);
        catalogUpdateConnectionTextField.setText(catalogUpdate);
    }

    @Override
    public void saveToOptions(CatalogConnectionOptionsImpl options) {
        options.setServiceConnectionAllowed(serviceConnectionCheckBox.isSelected());
        options.setServiceConnectionUrl(serviceConnectionTextField.getText());
        options.setCatalogUpdateAllowed(catalogUpdateConnectionCheckBox.isSelected());
        options.setCatalogUpdateUrl(catalogUpdateConnectionTextField.getText());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serviceConnectionLabel = new javax.swing.JLabel();
        catalogUpdateConnectionLabel = new javax.swing.JLabel();
        requireRestartLabel = new javax.swing.JLabel();
        serviceConnectionCheckBox = new javax.swing.JCheckBox();
        serviceConnectionTextField = new javax.swing.JTextField();
        catalogUpdateConnectionTextField = new javax.swing.JTextField();
        defaultCatalogUpdateConnectionButton = new javax.swing.JButton();
        catalogUpdateConnectionCheckBox = new javax.swing.JCheckBox();

        serviceConnectionLabel.setText("Catalog connection point (empty for localhost)");
        serviceConnectionLabel.setName("serviceConnectionLabel"); // NOI18N

        catalogUpdateConnectionLabel.setText("Catalog Update Point (empty for central catalog)");
        catalogUpdateConnectionLabel.setName("catalogUpdateConnectionLabel"); // NOI18N

        requireRestartLabel.setText("To apply this application restart is required");
        requireRestartLabel.setName("requireRestartLabel"); // NOI18N

        serviceConnectionCheckBox.setSelected(true);
        serviceConnectionCheckBox.setText("Connect to Service");
        serviceConnectionCheckBox.setName("serviceConnectionCheckBox"); // NOI18N

        serviceConnectionTextField.setName("serviceConnectionTextField"); // NOI18N

        catalogUpdateConnectionTextField.setEnabled(false);
        catalogUpdateConnectionTextField.setName("catalogUpdateConnectionTextField"); // NOI18N

        defaultCatalogUpdateConnectionButton.setText("Default");
        defaultCatalogUpdateConnectionButton.setEnabled(false);
        defaultCatalogUpdateConnectionButton.setName("defaultCatalogUpdateConnectionButton"); // NOI18N
        defaultCatalogUpdateConnectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultCatalogUpdateConnectionButtonActionPerformed(evt);
            }
        });

        catalogUpdateConnectionCheckBox.setSelected(true);
        catalogUpdateConnectionCheckBox.setText("Built-in Catalog Source (if service not available)");
        catalogUpdateConnectionCheckBox.setName("catalogUpdateConnectionCheckBox"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(serviceConnectionCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(requireRestartLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(catalogUpdateConnectionCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(serviceConnectionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(serviceConnectionTextField)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(catalogUpdateConnectionTextField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(defaultCatalogUpdateConnectionButton))
                            .addComponent(catalogUpdateConnectionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(serviceConnectionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serviceConnectionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serviceConnectionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(catalogUpdateConnectionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(catalogUpdateConnectionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(catalogUpdateConnectionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(defaultCatalogUpdateConnectionButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(requireRestartLabel)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void defaultCatalogUpdateConnectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultCatalogUpdateConnectionButtonActionPerformed
        catalogUpdateConnectionTextField.setText(DEFAULT_CATALOG_UPDATE_CONNECTION);
    }//GEN-LAST:event_defaultCatalogUpdateConnectionButtonActionPerformed

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        WindowUtils.invokeDialog(new CatalogConnectionPanel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox catalogUpdateConnectionCheckBox;
    private javax.swing.JLabel catalogUpdateConnectionLabel;
    private javax.swing.JTextField catalogUpdateConnectionTextField;
    private javax.swing.JButton defaultCatalogUpdateConnectionButton;
    private javax.swing.JLabel requireRestartLabel;
    private javax.swing.JCheckBox serviceConnectionCheckBox;
    private javax.swing.JLabel serviceConnectionLabel;
    private javax.swing.JTextField serviceConnectionTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setOptionsModifiedListener(OptionsModifiedListener listener) {
    }
}
