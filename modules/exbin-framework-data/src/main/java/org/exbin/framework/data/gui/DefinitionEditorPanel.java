/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.data.gui;

import org.exbin.framework.data.model.CatalogDefsTableModel;
import java.awt.BorderLayout;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.swing.event.ListSelectionEvent;
import org.exbin.framework.component.ComponentModule;
import org.exbin.framework.component.api.toolbar.EditItemActions;
import org.exbin.framework.component.api.toolbar.EditItemActionsHandler;
import org.exbin.framework.component.api.toolbar.EditItemActionsHandlerEmpty;
import org.exbin.framework.component.api.toolbar.MoveItemActions;
import org.exbin.framework.component.api.toolbar.MoveItemActionsHandler;
import org.exbin.framework.component.api.toolbar.MoveItemActionsHandlerEmpty;
import org.exbin.framework.component.gui.ToolBarSidePanel;
import org.exbin.framework.action.ActionModule;
import org.exbin.framework.utils.ClipboardActionsHandler;
import org.exbin.framework.utils.ClipboardActionsHandlerEmpty;
import org.exbin.framework.operation.undo.OperationUndoModule;
import org.exbin.framework.operation.undo.api.UndoActions;
import org.exbin.framework.operation.undo.api.EmptyUndoRedo;
import org.exbin.framework.utils.ClipboardActionsApi;
import org.exbin.framework.utils.UtilsModule;
import org.exbin.framework.utils.TestApplication;
import org.exbin.framework.utils.WindowUtils;
import org.exbin.xbup.core.catalog.XBACatalog;
import org.exbin.xbup.core.catalog.base.XBCItem;
import org.exbin.framework.operation.undo.api.UndoRedoState;

/**
 * Data type definition editor panel.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class DefinitionEditorPanel extends javax.swing.JPanel {

    private XBACatalog catalog;
    private XBCItem catalogItem;
//    private XBCSpecService specService;
    private CatalogDefsTableModel defsModel;
    private DefinitionPropertiesComponent propertiesComponent = new DefinitionPropertiesComponent();
//    private List<CatalogDefsTableItem> removeList;
//    private List<CatalogDefsTableItem> updateList;

//    private ToolBarEditorPanel toolBarEditorPanel;
    private ToolBarSidePanel toolBarSidePanel;

    public DefinitionEditorPanel() {
        super();
        initComponents();
        init();
    }

    private void init() {
//        toolBarEditorPanel = new ToolBarEditorPanel();
        add(definitionControlSplitPane, BorderLayout.CENTER);

        toolBarSidePanel = new ToolBarSidePanel();
        toolBarSidePanel.add(definitionScrollPane);
        definitionControlSplitPane.setLeftComponent(toolBarSidePanel);
        definitionControlSplitPane.setRightComponent(propertiesComponent);

        definitionsTable.getSelectionModel().addListSelectionListener((ListSelectionEvent e) -> {
            if (!e.getValueIsAdjusting()) {
                int selectedRow = definitionsTable.getSelectedRow();
                propertiesComponent.setItem(selectedRow >= 0 ? defsModel.getRowItem(selectedRow) : null);
                propertiesComponent.repaint();
                updateItemStatus();
            }
        });

        updateItemStatus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        definitionScrollPane = new javax.swing.JScrollPane();
        definitionsTable = new javax.swing.JTable();
        definitionControlSplitPane = new javax.swing.JSplitPane();

        definitionsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        definitionScrollPane.setViewportView(definitionsTable);

        definitionControlSplitPane.setDividerLocation(400);

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        TestApplication testApplication = UtilsModule.createTestApplication();
        testApplication.launch(() -> {
            OperationUndoModule operationUndoModule = new OperationUndoModule();
            testApplication.addModule(OperationUndoModule.MODULE_ID, operationUndoModule);
            ActionModule guiActionModule = new ActionModule();
            testApplication.addModule(ActionModule.MODULE_ID, guiActionModule);
            ComponentModule guiComponentModule = new ComponentModule();
            testApplication.addModule(ComponentModule.MODULE_ID, guiComponentModule);

            DefinitionEditorPanel definitionEditorPanel = new DefinitionEditorPanel();
            UndoRedoState undoRedoHandler = new EmptyUndoRedo();
            definitionEditorPanel.setUndoHandler(undoRedoHandler, operationUndoModule.createUndoActions());
            ClipboardActionsHandler clipboardActionsHandler = new ClipboardActionsHandlerEmpty();
            definitionEditorPanel.setClipboardHandler(clipboardActionsHandler, guiActionModule.getClipboardActions());
            WindowUtils.invokeWindow(definitionEditorPanel);

            MoveItemActionsHandler moveItemActionsHandler = new MoveItemActionsHandlerEmpty();
            MoveItemActions moveItemActions = guiComponentModule.createMoveItemActions(moveItemActionsHandler);
            EditItemActionsHandler editItemActionsHandler = new EditItemActionsHandlerEmpty();
            EditItemActions editItemActions = guiComponentModule.createEditItemActions(editItemActionsHandler);
            editItemActions.setEditItemActionsHandler(editItemActionsHandler);
            definitionEditorPanel.registerToolBarActions(editItemActions, moveItemActions);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane definitionControlSplitPane;
    private javax.swing.JScrollPane definitionScrollPane;
    private javax.swing.JTable definitionsTable;
    // End of variables declaration//GEN-END:variables

//    public void persist() {
//        for (CatalogDefsTableItem defItem : updateList) {
//            XBCXNameService nameService = catalog.getCatalogService(XBCXNameService.class);
//            XBCXDescService descService = catalog.getCatalogService(XBCXDescService.class);
//            XBCXStriService striService = catalog.getCatalogService(XBCXStriService.class);
//
//            XBESpecDef specDef = (XBESpecDef) defItem.getSpecDef();
//            if (specDef != null && specDef.getType() != defItem.getDefType()) {
//                specService.removeItem(specDef);
//                specDef = null;
//            }
//
//            if (specDef == null) {
//                specDef = (XBESpecDef) specService.createSpecDef((XBCSpec) catalogItem, defItem.getDefType());
//                specDef.setCatalogItem((XBESpec) catalogItem);
//            }
//
//            specDef.setXBIndex(defItem.getXbIndex());
//            specDef.setTarget((XBERev) defItem.getTarget());
//
//            specService.persistItem(specDef);
//
//            ((XBEXNameService) nameService).setDefaultText(specDef, defItem.getName());
//            ((XBEXDescService) descService).setDefaultText(specDef, defItem.getDescription());
//            ((XBEXStriService) striService).setItemStringIdText(specDef, defItem.getStringId());
//        }
//
//        for (CatalogDefsTableItem defItem : removeList) {
//            if (defItem.getSpecDef() != null) {
//                specService.removeItemDepth(defItem.getSpecDef());
//            }
//        }
//    }
    private void updateItemStatus() {
//        int selectedRow = itemDefinitionsTable.getSelectedRow();
//        int rowsCount = defsModel.getRowCount();
//        if ((selectedRow >= 0) && (selectedRow < rowsCount)) {
//            moveUpDefButton.setEnabled(selectedRow > 0);
//            moveDownDefButton.setEnabled(selectedRow < rowsCount - 1);
//            modifyButton.setEnabled(true);
//            removeDefButton.setEnabled(true);
//        } else {
//            moveUpDefButton.setEnabled(false);
//            moveDownDefButton.setEnabled(false);
//            modifyButton.setEnabled(false);
//            removeDefButton.setEnabled(false);
//        }
        definitionsTable.repaint();
    }

    @Nullable
    public XBCItem getCatalogItem() {
        return catalogItem;
    }

    public void setCatalogItem(XBCItem catalogItem) {
        this.catalogItem = catalogItem;
//        addButton.setEnabled(!(catalogItem instanceof XBCNode));
        if (defsModel != null) {
            defsModel.setCatalogItem(catalogItem);
            updateItemStatus();
        }
//        updateList = new ArrayList<>();
//        removeList = new ArrayList<>();
    }

    @Nullable
    public XBACatalog getCatalog() {
        return catalog;
    }

    public void setCatalog(XBACatalog catalog) {
        this.catalog = catalog;
//        specService = catalog.getCatalogService(XBCSpecService.class);
    }

    public void setDefsTableMode(CatalogDefsTableModel defsTableModel) {
        this.defsModel = defsTableModel;
        definitionsTable.setModel(defsModel);
        if (catalogItem != null) {
            defsModel.setCatalogItem(catalogItem);
            updateItemStatus();
        }
    }

    @Nullable
    public CatalogDefsTableModel getDefsModel() {
        return defsModel;
    }

    public void setUndoHandler(UndoRedoState undoHandler, UndoActions undoActions) {
        // toolBarEditorPanel.setUndoHandler(undoHandler, undoActions);
    }

    public void setClipboardHandler(ClipboardActionsHandler clipboardHandler, ClipboardActionsApi clipboardActions) {
        // toolBarEditorPanel.setClipboardHandler(clipboardHandler, clipboardActions);
    }

    public void registerToolBarActions(EditItemActions editItemActions, MoveItemActions moveItemActions) {
        toolBarSidePanel.addActions(editItemActions);
        toolBarSidePanel.addSeparator();
        toolBarSidePanel.addActions(moveItemActions);
    }
}
