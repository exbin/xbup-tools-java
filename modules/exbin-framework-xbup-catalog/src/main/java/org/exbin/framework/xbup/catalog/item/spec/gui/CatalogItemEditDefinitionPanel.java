/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.xbup.catalog.item.spec.gui;

import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.event.ListSelectionEvent;
import org.exbin.framework.component.api.ActionsProvider;
import org.exbin.framework.component.api.toolbar.EditItemActionsUpdateListener;
import org.exbin.framework.component.gui.ToolBarSidePanel;
import org.exbin.framework.data.model.CatalogDefsTableItem;
import org.exbin.framework.data.model.CatalogDefsTableModel;
import org.exbin.framework.utils.LanguageUtils;
import org.exbin.framework.utils.WindowUtils;
import org.exbin.xbup.catalog.entity.XBERev;
import org.exbin.xbup.catalog.entity.XBESpecDef;
import org.exbin.xbup.catalog.entity.service.XBEXDescService;
import org.exbin.xbup.catalog.entity.service.XBEXNameService;
import org.exbin.xbup.catalog.entity.service.XBEXStriService;
import org.exbin.xbup.core.catalog.XBACatalog;
import org.exbin.xbup.core.catalog.base.XBCItem;
import org.exbin.xbup.core.catalog.base.XBCSpec;
import org.exbin.xbup.core.catalog.base.service.XBCSpecService;
import org.exbin.xbup.core.catalog.base.service.XBCXDescService;
import org.exbin.xbup.core.catalog.base.service.XBCXNameService;
import org.exbin.xbup.core.catalog.base.service.XBCXStriService;

/**
 * Catalog item definition editor panel.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class CatalogItemEditDefinitionPanel extends javax.swing.JPanel {

    private XBACatalog catalog;
    private XBCItem catalogItem;
    private XBCSpecService specService;
    private CatalogDefsTableModel defsModel = new CatalogDefsTableModel();
    private final CatalogDefsDetailTableModel detailModel = new CatalogDefsDetailTableModel();
    private List<CatalogDefsTableItem> removeList;
    private List<CatalogDefsTableItem> updateList;
    private final ToolBarSidePanel toolBarPanel = new ToolBarSidePanel();

    private final java.util.ResourceBundle resourceBundle = LanguageUtils.getResourceBundleByClass(CatalogItemEditDefinitionPanel.class);

    public CatalogItemEditDefinitionPanel() {
        initComponents();
        init();
    }

    private void init() {
        itemDefinitionsTable.getSelectionModel().addListSelectionListener((ListSelectionEvent e) -> {
            if (!e.getValueIsAdjusting()) {
                detailModel.setItem(getSelectedDefinition());
                itemDefinitionPropertyTable.repaint();
            }
        });

        toolBarPanel.add(definitionControlSplitPane, BorderLayout.CENTER);
        add(toolBarPanel, BorderLayout.CENTER);
    }

    public int getSelectedDefinitionIndex() {
        return itemDefinitionsTable.getSelectedRow();
    }

    @Nullable
    public CatalogDefsTableItem getSelectedDefinition() {
        int selectedRow = itemDefinitionsTable.getSelectedRow();
        if (selectedRow >= 0) {
            return defsModel.getRowItem(selectedRow);
        }

        return null;
    }

    public void addToolbarActions(ActionsProvider actionsProvider) {
        toolBarPanel.addActions(actionsProvider);
    }

    public void setDefsModel(CatalogDefsTableModel defsTableModel) {
        defsModel = defsTableModel;
        itemDefinitionsTable.setModel(defsModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        definitionControlSplitPane = new javax.swing.JSplitPane();
        itemDefinitionsScrollPane = new javax.swing.JScrollPane();
        itemDefinitionsTable = new javax.swing.JTable();
        itemDefinitionPropertyScrollPanel = new javax.swing.JScrollPane();
        itemDefinitionPropertyTable = new javax.swing.JTable();

        definitionControlSplitPane.setDividerLocation(400);

        itemDefinitionsTable.setModel(defsModel);
        itemDefinitionsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        itemDefinitionsScrollPane.setViewportView(itemDefinitionsTable);

        definitionControlSplitPane.setLeftComponent(itemDefinitionsScrollPane);

        itemDefinitionPropertyTable.setModel(detailModel);
        itemDefinitionPropertyScrollPanel.setViewportView(itemDefinitionPropertyTable);

        definitionControlSplitPane.setRightComponent(itemDefinitionPropertyScrollPanel);

        setToolTipText(resourceBundle.getString("toolTipText")); // NOI18N
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        WindowUtils.invokeDialog(new CatalogItemEditDefinitionPanel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane definitionControlSplitPane;
    private javax.swing.JScrollPane itemDefinitionPropertyScrollPanel;
    private javax.swing.JTable itemDefinitionPropertyTable;
    private javax.swing.JScrollPane itemDefinitionsScrollPane;
    private javax.swing.JTable itemDefinitionsTable;
    // End of variables declaration//GEN-END:variables

    public void persist() {
        for (CatalogDefsTableItem defItem : updateList) {
            XBCXNameService nameService = catalog.getCatalogService(XBCXNameService.class);
            XBCXDescService descService = catalog.getCatalogService(XBCXDescService.class);
            XBCXStriService striService = catalog.getCatalogService(XBCXStriService.class);

            XBESpecDef specDef = (XBESpecDef) defItem.getSpecDef();
            if (specDef != null && specDef.getType() != defItem.getDefType()) {
                specService.removeSpecDef(specDef);
                specDef = null;
            }

            if (specDef == null) {
                specDef = (XBESpecDef) specService.createSpecDef((XBCSpec) catalogItem, defItem.getDefType());
            }

            specDef.setXBIndex(defItem.getXbIndex());
            specDef.setTargetRev((XBERev) defItem.getTarget());

            specService.persistSpecDef(specDef);

            ((XBEXNameService) nameService).setDefaultText(specDef, defItem.getName());
            ((XBEXDescService) descService).setDefaultText(specDef, defItem.getDescription());
            ((XBEXStriService) striService).setItemStringIdText(specDef, defItem.getStringId());
        }

        for (CatalogDefsTableItem defItem : removeList) {
            if (defItem.getSpecDef() != null) {
                specService.removeItemDepth(defItem.getSpecDef());
            }
        }
    }

    public void setCatalogItem(XBCItem catalogItem) {
        this.catalogItem = catalogItem;
        defsModel.setCatalogItem(catalogItem);
        updateList = new ArrayList<>();
        removeList = new ArrayList<>();
    }

    public XBCItem getCatalogItem() {
        return catalogItem;
    }

    public XBACatalog getCatalog() {
        return catalog;
    }

    public void setCatalog(XBACatalog catalog) {
        this.catalog = catalog;
        specService = catalog.getCatalogService(XBCSpecService.class);
        defsModel.setCatalog(catalog);
    }

    public CatalogDefsTableModel getDefsModel() {
        return defsModel;
    }

    public void definitionAdded(CatalogDefsTableItem resultDefinition) {
        long maxXbIndex = 0;
        if (defsModel.getRowCount() > 0) {
            CatalogDefsTableItem defItem = defsModel.getRowItem(defsModel.getRowCount() - 1);
            if (defItem.getXbIndex() >= maxXbIndex) {
                maxXbIndex = defItem.getXbIndex() + 1;
            }
        }

        if (resultDefinition == null) {
            JOptionPane.showMessageDialog(this, "Target type is required", "Set is not allowed", JOptionPane.ERROR_MESSAGE);
            return;
        }
        resultDefinition.setXbIndex(maxXbIndex);
        if (!updateList.contains(resultDefinition)) {
            updateList.add(resultDefinition);
        }

        defsModel.addDefs(resultDefinition);
        defsModel.fireTableDataChanged();
    }

    public void definitionEdited(CatalogDefsTableItem resultDefinition) {
        if (resultDefinition == null) {
            JOptionPane.showMessageDialog(this, "Target type is required", "Set is not allowed", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!updateList.contains(resultDefinition)) {
            updateList.add(resultDefinition);
        }
    }

    public void definitionRemoved(CatalogDefsTableItem resultDefinition) {
        if (updateList.contains(resultDefinition)) {
            updateList.remove(resultDefinition);
        }

        removeList.add(resultDefinition);
        defsModel.getDefs().remove(resultDefinition);
        defsModel.fireTableDataChanged();
    }

    public void definitionMovedUp(int selectedRow) {
        CatalogDefsTableItem specDef = defsModel.getRowItem(selectedRow);
        if (!updateList.contains(specDef)) {
            updateList.add(specDef);
        }
        CatalogDefsTableItem targetSpecDef = defsModel.getRowItem(selectedRow - 1);
        if (!updateList.contains(targetSpecDef)) {
            updateList.add(targetSpecDef);
        }

        defsModel.moveItemDown(selectedRow - 1);

        itemDefinitionsTable.setRowSelectionInterval(selectedRow - 1, selectedRow - 1);
    }

    public void definitionMovedDown(int selectedRow) {
        CatalogDefsTableItem specDef = defsModel.getRowItem(selectedRow);
        if (!updateList.contains(specDef)) {
            updateList.add(specDef);
        }
        CatalogDefsTableItem targetSpecDef = defsModel.getRowItem(selectedRow + 1);
        if (!updateList.contains(targetSpecDef)) {
            updateList.add(targetSpecDef);
        }

        defsModel.moveItemDown(selectedRow);
        itemDefinitionsTable.setRowSelectionInterval(selectedRow + 1, selectedRow + 1);
    }

    public void setPanelPopup(JPopupMenu popupMenu) {
        itemDefinitionsScrollPane.setComponentPopupMenu(popupMenu);
    }

    public void addSelectionListener(EditItemActionsUpdateListener updateListener) {
        itemDefinitionsTable.getSelectionModel().addListSelectionListener((e) -> {
            updateListener.stateChanged();
        });
    }
}
