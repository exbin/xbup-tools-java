/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.xbup.catalog.item.gui;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import org.exbin.framework.utils.WindowUtils;
import org.exbin.xbup.core.catalog.XBACatalog;
import org.exbin.xbup.core.catalog.base.XBCItem;
import org.exbin.xbup.core.catalog.base.service.XBCXDescService;
import org.exbin.xbup.core.catalog.base.service.XBCXHDocService;
import org.exbin.xbup.core.catalog.base.service.XBCXNameService;
import org.exbin.xbup.core.catalog.base.service.XBCXStriService;

/**
 * Compact information about catalog item panel.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class CatalogItemInfoPanel extends javax.swing.JPanel {

    private XBACatalog catalog;
    private String defaultText;
    private Mode mode = Mode.BASIC;

    public CatalogItemInfoPanel() {
        initComponents();
        init();
    }

    private void init() {
        defaultText = mainEditorPane.getText();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainScrollPane = new javax.swing.JScrollPane();
        mainEditorPane = new javax.swing.JEditorPane();

        setLayout(new java.awt.BorderLayout());

        mainEditorPane.setEditable(false);
        mainEditorPane.setContentType("text/html"); // NOI18N
        mainEditorPane.setText("<html>\n  <head>\n\n  </head>\n  <body>\n    <p style=\"margin-top: 0\">\n      No catalog item was selected.\n    </p>\n  </body>\n</html>\n");
        mainScrollPane.setViewportView(mainEditorPane);

        add(mainScrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        WindowUtils.invokeDialog(new CatalogItemInfoPanel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane mainEditorPane;
    private javax.swing.JScrollPane mainScrollPane;
    // End of variables declaration//GEN-END:variables

    public void setItem(@Nullable XBCItem item) {
        if (item == null) {
            mainEditorPane.setText(defaultText);
            return;
        }

        XBCXNameService nameService = catalog.getCatalogService(XBCXNameService.class);
        XBCXDescService descService = catalog.getCatalogService(XBCXDescService.class);
        XBCXStriService striService = catalog.getCatalogService(XBCXStriService.class);
        XBCXHDocService hdocService = catalog.getCatalogService(XBCXHDocService.class);

        String nameOrId = nameService.getDefaultText(item);
        if (nameOrId == null || nameOrId.isEmpty()) {
            nameOrId = String.valueOf(item.getId());
        }

        String stringId = striService.getItemStringIdText(item);
        String name = nameService.getDefaultText(item);
        String desc = descService.getDefaultText(item);
        String hdoc = hdocService.getDocumentationBodyText(item);

        StringBuilder builder = new StringBuilder();
        builder.append("<html><head></head><body>");
        builder.append("\n");
        if (mode != Mode.BASIC) {
            builder.append("<h1>Block: ").append(nameOrId).append("</h1>");
            builder.append("\n");
            builder.append("Id : ").append(String.valueOf(item.getId())).append("<br/>");
            builder.append("\n");
        }
        builder.append("String Id : ").append(stringId).append("<br/>");
        builder.append("\n");
        builder.append("Name : ").append(name).append("<br/>");
        builder.append("\n");
        builder.append("Description : ").append(desc).append("<br/>");
//        builder.append("TBD<br/>");
        if (hdoc != null && !hdoc.isEmpty()) {
            builder.append("\n");
            builder.append("\n");
            builder.append("<h2>Documentation</h2>");
            builder.append("\n");
            builder.append(hdoc);
            builder.append("\n");
        }
        builder.append("</body></html>");
        builder.append("\n");
        mainEditorPane.setText(builder.toString());
    }

    public XBACatalog getCatalog() {
        return catalog;
    }

    public void setCatalog(XBACatalog catalog) {
        this.catalog = catalog;
    }

    @Nonnull
    public Mode getMode() {
        return mode;
    }

    public void setMode(Mode mode) {
        this.mode = mode;
    }

    public enum Mode {
        BASIC,
        FULL
    }
}
