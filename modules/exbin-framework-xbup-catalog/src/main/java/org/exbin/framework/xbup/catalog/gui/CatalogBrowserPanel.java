/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.xbup.catalog.gui;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultEditorKit;
import org.exbin.framework.api.XBApplication;
import org.exbin.framework.frame.api.FrameModuleApi;
import org.exbin.framework.action.api.MenuManagement;
import org.exbin.framework.utils.LanguageUtils;
import org.exbin.framework.utils.WindowUtils;
import org.exbin.framework.utils.handler.DefaultControlHandler;
import org.exbin.framework.utils.gui.DefaultControlPanel;
import org.exbin.xbup.catalog.XBECatalog;
import org.exbin.xbup.core.catalog.XBACatalog;
import org.exbin.xbup.core.catalog.base.XBCItem;
import org.exbin.xbup.core.catalog.base.XBCNode;
import org.exbin.xbup.core.catalog.base.XBCSpec;
import org.exbin.xbup.core.catalog.base.XBCXDesc;
import org.exbin.xbup.core.catalog.base.XBCXName;
import org.exbin.xbup.core.catalog.base.XBCXStri;
import org.exbin.xbup.core.catalog.base.service.XBCNodeService;
import org.exbin.xbup.core.catalog.base.service.XBCSpecService;
import org.exbin.xbup.core.catalog.base.service.XBCXDescService;
import org.exbin.xbup.core.catalog.base.service.XBCXNameService;
import org.exbin.xbup.core.catalog.base.service.XBCXStriService;
import org.exbin.framework.xbup.catalog.XbupCatalogHandler;
import org.exbin.framework.xbup.catalog.item.gui.CatalogEditItemPanel;

/**
 * Catalog browser panel.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class CatalogBrowserPanel extends javax.swing.JPanel {

    private XBApplication application;
    private XBCItem currentItem;

    private XBACatalog catalog;
    private XbupCatalogHandler serviceManagerHandler;

    // Cached values
    private XBCNodeService nodeService;
    private XBCSpecService specService;
    private XBCXNameService nameService;
    private XBCXDescService descService;
    private XBCXStriService striService;

    private final Map<String, ActionListener> actionListenerMap = new HashMap<>();
    private MenuManagement menuManagement;
    private final java.util.ResourceBundle resourceBundle = LanguageUtils.getResourceBundleByClass(CatalogBrowserPanel.class);

    public CatalogBrowserPanel() {
        initComponents();

        updateItem();

        actionListenerMap.put(DefaultEditorKit.cutAction, (ActionListener) (ActionEvent e) -> {
            performCut();
        });
        actionListenerMap.put(DefaultEditorKit.copyAction, (ActionListener) (ActionEvent e) -> {
            performCopy();
        });
        actionListenerMap.put(DefaultEditorKit.pasteAction, (ActionListener) (ActionEvent e) -> {
            performPaste();
        });
        actionListenerMap.put(DefaultEditorKit.deleteNextCharAction, (ActionListener) (ActionEvent e) -> {
            performDelete();
        });
        actionListenerMap.put("delete", (ActionListener) (ActionEvent e) -> {
            performDelete();
        });
    }

    public void setApplication(XBApplication application) {
        this.application = application;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        catalogTreePopupMenu = new javax.swing.JPopupMenu();
        popupEditMenuItem = new javax.swing.JMenuItem();
        popupRefreshMenuItem = new javax.swing.JMenuItem();
        panelSplitPane = new javax.swing.JSplitPane();
        catalogItemSplitPane = new javax.swing.JSplitPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        temporaryPanel = new javax.swing.JPanel();
        temporaryLabel = new javax.swing.JLabel();

        catalogTreePopupMenu.setName("catalogTreePopupMenu"); // NOI18N

        popupEditMenuItem.setText(resourceBundle.getString("editMenuItem.text")); // NOI18N
        popupEditMenuItem.setToolTipText(resourceBundle.getString("editMenuItem.toolTipText")); // NOI18N
        popupEditMenuItem.setName("popupEditMenuItem"); // NOI18N
        popupEditMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupEditMenuItemActionPerformed(evt);
            }
        });
        catalogTreePopupMenu.add(popupEditMenuItem);

        popupRefreshMenuItem.setText(resourceBundle.getString("refreshMenuItem.text")); // NOI18N
        popupRefreshMenuItem.setToolTipText(resourceBundle.getString("refreshMenuItem.toolTipText")); // NOI18N
        popupRefreshMenuItem.setName("popupRefreshMenuItem"); // NOI18N
        popupRefreshMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popupRefreshMenuItemActionPerformed(evt);
            }
        });
        catalogTreePopupMenu.add(popupRefreshMenuItem);

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        panelSplitPane.setDividerLocation(100);
        panelSplitPane.setName("panelSplitPane"); // NOI18N

        catalogItemSplitPane.setDividerLocation(180);
        catalogItemSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        catalogItemSplitPane.setName("catalogItemSplitPane"); // NOI18N

        jLabel1.setText("Packages");
        jLabel1.setName("jLabel1"); // NOI18N
        catalogItemSplitPane.setTopComponent(jLabel1);

        jLabel2.setText("Items");
        jLabel2.setName("jLabel2"); // NOI18N
        catalogItemSplitPane.setRightComponent(jLabel2);

        panelSplitPane.setLeftComponent(catalogItemSplitPane);

        temporaryPanel.setName("temporaryPanel"); // NOI18N
        temporaryPanel.setLayout(new java.awt.BorderLayout());

        temporaryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        temporaryLabel.setText("TBD");
        temporaryLabel.setName("temporaryLabel"); // NOI18N
        temporaryPanel.add(temporaryLabel, java.awt.BorderLayout.CENTER);

        panelSplitPane.setRightComponent(temporaryPanel);

        add(panelSplitPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void popupEditMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupEditMenuItemActionPerformed
        if (currentItem != null) {
            FrameModuleApi frameModule = application.getModuleRepository().getModuleByInterface(FrameModuleApi.class);
            CatalogEditItemPanel editPanel = new CatalogEditItemPanel();
            editPanel.setApplication(application);
            editPanel.setMenuManagement(menuManagement);
            editPanel.setCatalog(catalog);
            editPanel.setCatalogItem(currentItem);

            DefaultControlPanel controlPanel = new DefaultControlPanel();
            final WindowUtils.DialogWrapper dialog = frameModule.createDialog(editPanel, controlPanel);
            WindowUtils.addHeaderPanel(dialog.getWindow(), editPanel.getClass(), editPanel.getResourceBundle());
            controlPanel.setHandler((DefaultControlHandler.ControlActionType actionType) -> {
                if (actionType == DefaultControlHandler.ControlActionType.OK) {
                    EntityManager em = ((XBECatalog) catalog).getEntityManager();
                    EntityTransaction transaction = em.getTransaction();
                    transaction.begin();
                    editPanel.persist();
                    setItem(currentItem);
                    em.flush();
                    transaction.commit();
                }
                dialog.close();
            });
            dialog.showCentered(this);
            dialog.dispose();
        }
    }//GEN-LAST:event_popupEditMenuItemActionPerformed

    private void popupRefreshMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popupRefreshMenuItemActionPerformed
        Component invoker = catalogTreePopupMenu.getInvoker();
        reloadNodesTree();
    }//GEN-LAST:event_popupRefreshMenuItemActionPerformed

    public void setNode(XBCNode node) {
        setItem(node);
    }

    public void setItem(XBCItem item) {
        currentItem = item;

        if (serviceManagerHandler != null) {
//            updateActionStatus(serviceManagerHandler.getLastFocusOwner());
        }

        updateItem();
    }

//    @Override
//    public boolean updateActionStatus(Component component) {
//        // clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
//
//        if (serviceManagerHandler != null) {
//            serviceManagerHandler.getCutAction().setEnabled(currentItem != null);
//            serviceManagerHandler.getCopyAction().setEnabled(currentItem != null);
//            serviceManagerHandler.getPasteAction().setEnabled(false); // TODO clipboard.isDataFlavorAvailable(xbFlavor));
//            serviceManagerHandler.getDeleteAction().setEnabled(currentItem != null);
//            serviceManagerHandler.getSelectAllAction().setEnabled(false);
//        }
//
//        // frameManagement.getUndoAction().setEnabled(treeUndo.canUndo());
//        // frameManagement.getRedoAction().setEnabled(treeUndo.canRedo());
//        return true;
//    }
    public void setServiceManagerHandler(XbupCatalogHandler serviceManagerHandler) {
        this.serviceManagerHandler = serviceManagerHandler;
    }

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        WindowUtils.invokeDialog(new CatalogBrowserPanel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane catalogItemSplitPane;
    private javax.swing.JPopupMenu catalogTreePopupMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSplitPane panelSplitPane;
    private javax.swing.JMenuItem popupEditMenuItem;
    private javax.swing.JMenuItem popupRefreshMenuItem;
    private javax.swing.JLabel temporaryLabel;
    private javax.swing.JPanel temporaryPanel;
    // End of variables declaration//GEN-END:variables

    public void setCatalog(XBACatalog catalog) {
        this.catalog = catalog;

        nodeService = catalog == null ? null : catalog.getCatalogService(XBCNodeService.class);
        specService = catalog == null ? null : catalog.getCatalogService(XBCSpecService.class);
        nameService = catalog == null ? null : catalog.getCatalogService(XBCXNameService.class);
        descService = catalog == null ? null : catalog.getCatalogService(XBCXDescService.class);
        striService = catalog == null ? null : catalog.getCatalogService(XBCXStriService.class);

        reloadNodesTree();
    }

    public void performCut() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void performCopy() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void performPaste() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void performDelete() {
        Object[] options = {
            "Delete",
            "Cancel"
        };

        int result = JOptionPane.showOptionDialog(this,
                "Are you sure you want to delete this item?",
                "Delete Item",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null, options, options[0]);

        if (result == JOptionPane.OK_OPTION) {
            // TODO: Use different transaction management later
            EntityManager em = ((XBECatalog) catalog).getEntityManager();
            EntityTransaction transaction = em.getTransaction();
            transaction.begin();
            List<XBCXName> names = nameService.getItemNames(currentItem);
            for (XBCXName name : names) {
                nameService.removeItem(name);
            }

            List<XBCXDesc> descs = descService.getItemDescs(currentItem);
            for (XBCXDesc desc : descs) {
                descService.removeItem(desc);
            }

            XBCXStri stri = striService.getItemStringId(currentItem);
            if (stri != null) {
                striService.removeItem(stri);
            }

            if (currentItem instanceof XBCNode) {
                nodeService.removeItem((XBCNode) currentItem);
            } else {
                specService.removeItem((XBCSpec) currentItem);
            }
            em.flush();
            transaction.commit();

            repaint();
        }
    }

//    public boolean performAction(String eventName, ActionEvent event) {
//        if (serviceManagerHandler != null && serviceManagerHandler.getLastFocusOwner() != null) {
//            ActionListener actionListener = actionListenerMap.get(eventName);
//            if (actionListener != null) {
//                actionListener.actionPerformed(event);
//                return true;
//            }
//        }
//
//        return false;
//    }
    /**
     * Gets the extension part of file name.
     *
     * @param file Source file
     * @return extension part of file name
     */
    public static String getExtension(File file) {
        String ext = null;
        String str = file.getName();
        int i = str.lastIndexOf('.');

        if (i > 0 && i < str.length() - 1) {
            ext = str.substring(i + 1).toLowerCase();
        }
        return ext;
    }

    public void setMenuManagement(MenuManagement menuManagement) {
        this.menuManagement = menuManagement;
        menuManagement.insertMainPopupMenu(catalogTreePopupMenu, 4);
    }

    private void reloadNodesTree() {
//        XBCNode rootNode = nodeService.getMainRootNode().get();
//        throw new UnsupportedOperationException("Not supported yet.");
    }

    private void updateItem() {
        popupEditMenuItem.setEnabled(currentItem != null);
    }
}
