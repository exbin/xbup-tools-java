/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.xbup.catalog.item.property.gui;

import java.awt.Component;
import java.awt.EventQueue;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.EventObject;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.swing.DefaultCellEditor;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.text.JTextComponent;
import org.exbin.framework.api.XBApplication;
import org.exbin.framework.utils.WindowUtils;
import org.exbin.framework.xbup.catalog.item.property.action.EditBlockPaneAction;
import org.exbin.xbup.catalog.entity.XBEItem;
import org.exbin.xbup.catalog.entity.XBENode;
import org.exbin.xbup.catalog.entity.XBEXFile;
import org.exbin.xbup.catalog.entity.XBEXHDoc;
import org.exbin.xbup.catalog.entity.XBEXIcon;
import org.exbin.xbup.catalog.entity.XBEXIconMode;
import org.exbin.xbup.catalog.entity.XBEXLanguage;
import org.exbin.xbup.catalog.entity.service.XBEXDescService;
import org.exbin.xbup.catalog.entity.service.XBEXFileService;
import org.exbin.xbup.catalog.entity.service.XBEXHDocService;
import org.exbin.xbup.catalog.entity.service.XBEXIconService;
import org.exbin.xbup.catalog.entity.service.XBEXNameService;
import org.exbin.xbup.catalog.entity.service.XBEXStriService;
import org.exbin.xbup.core.catalog.XBACatalog;
import org.exbin.xbup.core.catalog.base.XBCBlockSpec;
import org.exbin.xbup.core.catalog.base.XBCItem;
import org.exbin.xbup.core.catalog.base.XBCNode;
import org.exbin.xbup.core.catalog.base.XBCXFile;
import org.exbin.xbup.core.catalog.base.XBCXHDoc;
import org.exbin.xbup.core.catalog.base.XBCXIcon;
import org.exbin.xbup.core.catalog.base.XBCXLanguage;
import org.exbin.xbup.core.catalog.base.XBCXStri;
import org.exbin.xbup.core.catalog.base.service.XBCItemService;
import org.exbin.xbup.core.catalog.base.service.XBCXDescService;
import org.exbin.xbup.core.catalog.base.service.XBCXFileService;
import org.exbin.xbup.core.catalog.base.service.XBCXHDocService;
import org.exbin.xbup.core.catalog.base.service.XBCXIconService;
import org.exbin.xbup.core.catalog.base.service.XBCXLangService;
import org.exbin.xbup.core.catalog.base.service.XBCXNameService;
import org.exbin.xbup.core.catalog.base.service.XBCXStriService;
import sun.swing.DefaultLookup;

/**
 * Panel for properties of the catalog item.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class CatalogItemEditPropertiesPanel extends javax.swing.JPanel {

    private XBApplication application;
    private XBACatalog catalog;
    private XBCItem catalogItem;
    private CatalogDocPropertyTableCellPanel docCellPanel = null;
    private CatalogParentPropertyTableCellPanel parentCellPanel = null;
    private CatalogBIconPropertyTableCellPanel bIconCellPanel = null;
    private CatalogSIconPropertyTableCellPanel sIconCellPanel = null;
    private CatalogREditorPropertyTableCellPanel rEditorCellPanel = null;
    private CatalogPViewerPropertyTableCellPanel pViewerCellPanel = null;
    private CatalogPEditorPropertyTableCellPanel pEditorCellPanel = null;

    public CatalogItemEditPropertiesPanel() {
        initComponents();
    }

    public void setApplication(XBApplication application) {
        this.application = application;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        propertiesTable = new JTable(null) {
            @Override
            public boolean editCellAt(int row, int column, EventObject e) {
                boolean result = super.editCellAt(row, column, e);
                final Component editor = getEditorComponent();
                if (editor == null || !(editor instanceof JTextComponent)) {
                    return result;
                }
                if (e instanceof MouseEvent) {
                    EventQueue.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            ((JTextComponent) editor).selectAll();
                        }

                    });
                } else {
                    ((JTextComponent) editor).selectAll();
                }
                return result;
            }
        };

        setLayout(new java.awt.BorderLayout());

        scrollPane.setName("scrollPane"); // NOI18N

        propertiesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Property", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        propertiesTable.setName("propertiesTable"); // NOI18N
        scrollPane.setViewportView(propertiesTable);

        add(scrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        WindowUtils.invokeDialog(new CatalogItemEditPropertiesPanel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable propertiesTable;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables

    public void setCatalogItem(XBCItem catalogItem) {
        this.catalogItem = catalogItem;
        DefaultTableModel tableModel = (DefaultTableModel) propertiesTable.getModel();

        XBCXStriService striService = catalog.getCatalogService(XBCXStriService.class);
        XBCXNameService nameService = catalog.getCatalogService(XBCXNameService.class);
        XBCXDescService descService = catalog.getCatalogService(XBCXDescService.class);

        // Remove all rows
        for (int i = tableModel.getRowCount() - 1; i > 0; i--) {
            tableModel.removeRow(i);
        }

        String parentId = "";
        if (catalogItem.getParentItem().isPresent()) {
            parentId = String.valueOf(catalogItem.getParentItem().get().getId());
        }
        tableModel.addRow(new String[]{"Name", nameService.getDefaultText(catalogItem)});
        tableModel.addRow(new String[]{"Description", descService.getDefaultText(catalogItem)});
        tableModel.addRow(new String[]{"Parent Node", parentId});
        long xbIndex = catalogItem.getXBIndex();
        tableModel.addRow(new String[]{"XBIndex", String.valueOf(xbIndex)});

        String pathName = null;
        XBCXStri stringId = striService.getItemStringId(catalogItem);
        if (stringId != null) {
            pathName = stringId.getText();
        }
        tableModel.addRow(new String[]{"StringId", pathName});
        tableModel.addRow(new String[]{"HDoc", ""});

        tableModel.addRow(new String[]{"Big Icon (32x32)", ""});
        tableModel.addRow(new String[]{"Small Icon (16x16)", ""});

        if (catalogItem instanceof XBCBlockSpec) {
            tableModel.addRow(new String[]{"Row editor", ""});
            tableModel.addRow(new String[]{"Panel Viewer", ""});
            tableModel.addRow(new String[]{"Panel editor", ""});
        }

        TableColumnModel columns = propertiesTable.getColumnModel();
        docCellPanel = new CatalogDocPropertyTableCellPanel(catalog);
        docCellPanel.setApplication(application);
        docCellPanel.setCatalogItem(catalogItem);
        parentCellPanel = new CatalogParentPropertyTableCellPanel(catalog);
        parentCellPanel.setApplication(application);
        parentCellPanel.setCatalogItem(catalogItem);
        bIconCellPanel = new CatalogBIconPropertyTableCellPanel(catalog);
        bIconCellPanel.setApplication(application);
        bIconCellPanel.setCatalogItem(catalogItem);
        sIconCellPanel = new CatalogSIconPropertyTableCellPanel(catalog);
        sIconCellPanel.setApplication(application);
        sIconCellPanel.setCatalogItem(catalogItem);
        if (catalogItem instanceof XBCBlockSpec) {
            pEditorCellPanel = new CatalogPEditorPropertyTableCellPanel(catalog);
            pEditorCellPanel.setApplication(application);
            pEditorCellPanel.setCatalogItem(catalogItem);
            pViewerCellPanel = new CatalogPViewerPropertyTableCellPanel(catalog);
            pViewerCellPanel.setApplication(application);
            pViewerCellPanel.setCatalogItem(catalogItem);
            rEditorCellPanel = new CatalogREditorPropertyTableCellPanel(catalog);
            rEditorCellPanel.setApplication(application);
            rEditorCellPanel.setCatalogItem(catalogItem);
        }

        columns.getColumn(1).setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
                switch (row) {
                    case 2: {
                        parentCellPanel.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
                        parentCellPanel.getCellComponent().setBorder(null);
                        return parentCellPanel;
                    }
                    case 5: {
                        docCellPanel.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
                        docCellPanel.getCellComponent().setBorder(null);
                        return docCellPanel;
                    }
                    case 6: {
                        bIconCellPanel.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
                        bIconCellPanel.getCellComponent().setBorder(null);
                        return bIconCellPanel;
                    }
                    case 7: {
                        sIconCellPanel.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
                        sIconCellPanel.getCellComponent().setBorder(null);
                        return sIconCellPanel;
                    }
                    case 8: {
                        rEditorCellPanel.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
                        rEditorCellPanel.getCellComponent().setBorder(null);
                        return rEditorCellPanel;
                    }
                    case 9: {
                        pViewerCellPanel.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
                        pViewerCellPanel.getCellComponent().setBorder(null);
                        return pViewerCellPanel;
                    }
                    case 10: {
                        pEditorCellPanel.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
                        pEditorCellPanel.getCellComponent().setBorder(null);
                        return pEditorCellPanel;
                    }
                }

                return super.getTableCellRendererComponent(table, value,
                        isSelected, hasFocus, row, column);
            }
        });

        DefaultCellEditor defaultCellEditor = new DefaultCellEditor(new JTextField()) {
            @Override
            public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
                switch (row) {
                    case 2: {
                        parentCellPanel.setBackground(table.getSelectionBackground());
                        parentCellPanel.getCellComponent().setBorder(DefaultLookup.getBorder(parentCellPanel.getCellComponent(), ui, "Table.focusCellHighlightBorder"));
                        return parentCellPanel;
                    }
                    case 5: {
                        docCellPanel.setBackground(table.getSelectionBackground());
                        docCellPanel.getCellComponent().setBorder(DefaultLookup.getBorder(docCellPanel.getCellComponent(), ui, "Table.focusCellHighlightBorder"));
                        return docCellPanel;
                    }
                    case 6: {
                        bIconCellPanel.setBackground(table.getSelectionBackground());
                        bIconCellPanel.getCellComponent().setBorder(DefaultLookup.getBorder(bIconCellPanel.getCellComponent(), ui, "Table.focusCellHighlightBorder"));
                        return bIconCellPanel;
                    }
                    case 7: {
                        sIconCellPanel.setBackground(table.getSelectionBackground());
                        sIconCellPanel.getCellComponent().setBorder(DefaultLookup.getBorder(sIconCellPanel.getCellComponent(), ui, "Table.focusCellHighlightBorder"));
                        return sIconCellPanel;
                    }
                    case 8: {
                        rEditorCellPanel.setBackground(table.getSelectionBackground());
                        rEditorCellPanel.getCellComponent().setBorder(DefaultLookup.getBorder(rEditorCellPanel.getCellComponent(), ui, "Table.focusCellHighlightBorder"));
                        return rEditorCellPanel;
                    }
                    case 9: {
                        pViewerCellPanel.setBackground(table.getSelectionBackground());
                        pViewerCellPanel.getCellComponent().setBorder(DefaultLookup.getBorder(rEditorCellPanel.getCellComponent(), ui, "Table.focusCellHighlightBorder"));
                        return pViewerCellPanel;
                    }
                    case 10: {
                        pEditorCellPanel.setBackground(table.getSelectionBackground());
                        pEditorCellPanel.getCellComponent().setBorder(DefaultLookup.getBorder(pEditorCellPanel.getCellComponent(), ui, "Table.focusCellHighlightBorder"));
                        return pEditorCellPanel;
                    }
                }
                return super.getTableCellEditorComponent(table, value, isSelected, row, column);
            }
        };

        defaultCellEditor.setClickCountToStart(0);
        columns.getColumn(1).setCellEditor(defaultCellEditor);
        propertiesTable.repaint();
    }

    public XBCItem getCatalogItem() {
        return catalogItem;
    }

    public void persist() {
        if (propertiesTable.getCellEditor() != null) {
            propertiesTable.getCellEditor().stopCellEditing();
        }

        XBCXStriService striService = catalog.getCatalogService(XBCXStriService.class);
        XBCItemService itemService = catalog.getCatalogService(XBCItemService.class);
        XBCXNameService nameService = catalog.getCatalogService(XBCXNameService.class);
        XBCXDescService descService = catalog.getCatalogService(XBCXDescService.class);

        DefaultTableModel tableModel = (DefaultTableModel) propertiesTable.getModel();
        ((XBEXNameService) nameService).setDefaultText(catalogItem, (String) tableModel.getValueAt(0, 1));
        ((XBEXDescService) descService).setDefaultText(catalogItem, (String) tableModel.getValueAt(1, 1));
        if (catalogItem instanceof XBEItem) {
            String xbIndex = (String) tableModel.getValueAt(3, 1);
            if (xbIndex != null) {
                ((XBEItem) catalogItem).setXBIndex(Long.parseLong(xbIndex));
            } else {
                throw new UnsupportedOperationException("Not supported yet.");
            }

            Optional<XBCNode> parentNode = parentCellPanel.getParentNode();
            if (parentNode.isPresent() && parentNode.get().equals(((XBEItem) catalogItem).getParentItem().orElse(null))) {
                ((XBEItem) catalogItem).setParentItem((XBENode) parentNode.get());
            }

            itemService.persistItem((XBCItem) catalogItem);
        }

        ((XBEXStriService) striService).setItemStringIdText(catalogItem, (String) tableModel.getValueAt(4, 1));

        String document = docCellPanel.getDocument();
        if (document != null) {
            XBCXFileService fileService = catalog.getCatalogService(XBCXFileService.class);
            XBCXHDocService hdocService = catalog.getCatalogService(XBCXHDocService.class);

            XBCXHDoc itemHDoc = hdocService.getDocumentation(catalogItem);

            if (document.isEmpty()) {
                if (itemHDoc != null) {
                    fileService.removeItem(itemHDoc.getDocFile());
                    ((XBEXHDoc) itemHDoc).setDocFile(null);
                    hdocService.removeItem(itemHDoc);
                }
            } else {
                if (itemHDoc == null) {
                    XBCXLangService langService = catalog.getCatalogService(XBCXLangService.class);
                    XBCXLanguage defaultLanguage = langService.getDefaultLang();
                    itemHDoc = new XBEXHDoc();
                    ((XBEXHDoc) itemHDoc).setLang((XBEXLanguage) defaultLanguage);
                    ((XBEXHDoc) itemHDoc).setItem((XBEItem) catalogItem);
                }

                XBCXFile itemHDocFile = itemHDoc.getDocFile();
                if (itemHDocFile == null) {
                    XBCXStri stringId = striService.getItemStringId(catalogItem);
                    String itemPath = stringId == null ? "" : stringId.getText();
                    itemHDocFile = (XBCXFile) fileService.createItem();
                    ((XBEXFile) itemHDocFile).setFilename("hdoc-" + itemPath);
                    ((XBEXFile) itemHDocFile).setNode((XBENode) catalogItem.getParentItem().get());
                    ((XBEXHDoc) itemHDoc).setDocFile((XBEXFile) itemHDocFile);
                }

                OutputStream fileOutputStream = ((XBEXFileService) fileService).setFile(itemHDocFile);
                OutputStreamWriter writer = new OutputStreamWriter(fileOutputStream);
                try {
                    writer.write(document);
                    writer.close();
                } catch (IOException ex) {
                    Logger.getLogger(CatalogItemEditPropertiesPanel.class.getName()).log(Level.SEVERE, null, ex);
                }

                ((XBEXFileService) fileService).persistItem((XBEXFile) itemHDocFile);
                ((XBEXHDocService) hdocService).persistItem((XBEXHDoc) itemHDoc);
            }
        }

        byte[] bigIcon = bIconCellPanel.getIcon();
        if (bigIcon != null) {
            XBCXFileService fileService = catalog.getCatalogService(XBCXFileService.class);
            XBCXIconService iconService = catalog.getCatalogService(XBCXIconService.class);

            XBCXIcon itemIcon = iconService.getDefaultBigIcon(catalogItem);
            if (bigIcon.length == 0) {
                if (itemIcon != null) {
                    fileService.removeItem(itemIcon.getIconFile());
                    ((XBEXIcon) itemIcon).setIconFile(null);
                    iconService.removeItem(itemIcon);
                }
            } else {
                if (itemIcon == null) {
                    itemIcon = new XBEXIcon();
                    ((XBEXIcon) itemIcon).setParent((XBEItem) catalogItem);
                    ((XBEXIcon) itemIcon).setMode((XBEXIconMode) iconService.getIconMode(2l));
                }

                XBCXFile itemIconFile = itemIcon.getIconFile();
                if (itemIconFile == null) {
                    XBCXStri stringId = striService.getItemStringId(catalogItem);
                    String itemPath = stringId == null ? "" : stringId.getText();
                    itemIconFile = (XBCXFile) fileService.createItem();
                    ((XBEXFile) itemIconFile).setFilename("bicon-" + itemPath);
                    ((XBEXFile) itemIconFile).setNode((XBENode) catalogItem.getParentItem().get());
                    ((XBEXIcon) itemIcon).setIconFile((XBEXFile) itemIconFile);
                }

                ((XBEXFile) itemIconFile).setContent(bigIcon);

                ((XBEXFileService) fileService).persistItem((XBEXFile) itemIconFile);
                ((XBEXIconService) iconService).persistItem((XBEXIcon) itemIcon);
            }
        }

        byte[] smallIcon = sIconCellPanel.getIcon();
        if (smallIcon != null) {
            XBCXFileService fileService = catalog.getCatalogService(XBCXFileService.class);
            XBCXIconService iconService = catalog.getCatalogService(XBCXIconService.class);

            XBCXIcon itemIcon = iconService.getDefaultSmallIcon(catalogItem);
            if (smallIcon.length == 0) {
                if (itemIcon != null) {
                    fileService.removeItem(itemIcon.getIconFile());
                    ((XBEXIcon) itemIcon).setIconFile(null);
                    iconService.removeItem(itemIcon);
                }
            } else {
                if (itemIcon == null) {
                    itemIcon = new XBEXIcon();
                    ((XBEXIcon) itemIcon).setParent((XBEItem) catalogItem);
                    ((XBEXIcon) itemIcon).setMode((XBEXIconMode) iconService.getIconMode(1l));
                }

                XBCXFile itemIconFile = itemIcon.getIconFile();
                if (itemIconFile == null) {
                    XBCXStri stringId = striService.getItemStringId(catalogItem);
                    String itemPath = stringId == null ? "" : stringId.getText();
                    itemIconFile = (XBCXFile) fileService.createItem();
                    ((XBEXFile) itemIconFile).setFilename("sicon-" + itemPath);
                    ((XBEXFile) itemIconFile).setNode((XBENode) catalogItem.getParentItem().get());
                    ((XBEXIcon) itemIcon).setIconFile((XBEXFile) itemIconFile);
                }

                ((XBEXFile) itemIconFile).setContent(smallIcon);

                ((XBEXFileService) fileService).persistItem((XBEXFile) itemIconFile);
                ((XBEXIconService) iconService).persistItem((XBEXIcon) itemIcon);
            }
        }
    }

    public XBACatalog getCatalog() {
        return catalog;
    }

    public void setCatalog(XBACatalog catalog) {
        this.catalog = catalog;
    }
}
