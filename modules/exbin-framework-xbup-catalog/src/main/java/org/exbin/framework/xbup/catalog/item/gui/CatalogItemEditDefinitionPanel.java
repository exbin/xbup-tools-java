/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.xbup.catalog.item.gui;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import org.exbin.framework.api.XBApplication;
import org.exbin.framework.data.model.CatalogDefsTableItem;
import org.exbin.framework.data.model.CatalogDefsTableModel;
import org.exbin.framework.frame.api.FrameModuleApi;
import org.exbin.framework.utils.LanguageUtils;
import org.exbin.framework.utils.WindowUtils;
import org.exbin.framework.utils.WindowUtils.DialogWrapper;
import org.exbin.framework.utils.handler.DefaultControlHandler;
import org.exbin.framework.utils.gui.DefaultControlPanel;
import org.exbin.xbup.catalog.entity.XBERev;
import org.exbin.xbup.catalog.entity.XBESpecDef;
import org.exbin.xbup.catalog.entity.service.XBEXDescService;
import org.exbin.xbup.catalog.entity.service.XBEXNameService;
import org.exbin.xbup.catalog.entity.service.XBEXStriService;
import org.exbin.xbup.core.catalog.XBACatalog;
import org.exbin.xbup.core.catalog.base.XBCItem;
import org.exbin.xbup.core.catalog.base.XBCNode;
import org.exbin.xbup.core.catalog.base.XBCSpec;
import org.exbin.xbup.core.catalog.base.service.XBCSpecService;
import org.exbin.xbup.core.catalog.base.service.XBCXDescService;
import org.exbin.xbup.core.catalog.base.service.XBCXNameService;
import org.exbin.xbup.core.catalog.base.service.XBCXStriService;

/**
 * XBManager catalog item edit documentation panel.
 *
 * @author ExBin Project (https://exbin.org)
 */
public class CatalogItemEditDefinitionPanel extends javax.swing.JPanel {

    private XBApplication application;
    private XBACatalog catalog;
    private XBCItem catalogItem;
    private XBCSpecService specService;
    private final CatalogDefsTableModel defsModel = new CatalogDefsTableModel();
    private final CatalogDefsDetailTableModel detailModel = new CatalogDefsDetailTableModel();
    private List<CatalogDefsTableItem> removeList;
    private List<CatalogDefsTableItem> updateList;
    private final java.util.ResourceBundle resourceBundle = LanguageUtils.getResourceBundleByClass(CatalogItemEditDefinitionPanel.class);

    public CatalogItemEditDefinitionPanel() {
        initComponents();

        itemDefinitionsTable.getSelectionModel().addListSelectionListener((ListSelectionEvent e) -> {
            if (!e.getValueIsAdjusting()) {
                int selectedRow = itemDefinitionsTable.getSelectedRow();
                detailModel.setItem(selectedRow >= 0 ? defsModel.getRowItem(selectedRow) : null);
                itemDefinitionPropertyTable.repaint();
                updateItemStatus();
            }
        });

        updateItemStatus();
    }

    public void setApplication(XBApplication application) {
        this.application = application;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        definitionControlPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        definitionControlSidePanel = new javax.swing.JPanel();
        modifyButton = new javax.swing.JButton();
        removeDefButton = new javax.swing.JButton();
        moveUpDefButton = new javax.swing.JButton();
        moveDownDefButton = new javax.swing.JButton();
        definitionControlSplitPane = new javax.swing.JSplitPane();
        itemDefinitionsScrollPane = new javax.swing.JScrollPane();
        itemDefinitionsTable = new javax.swing.JTable();
        itemDefinitionPropertyScrollPanel = new javax.swing.JScrollPane();
        itemDefinitionPropertyTable = new javax.swing.JTable();

        setToolTipText(resourceBundle.getString("toolTipText")); // NOI18N
        setLayout(new java.awt.BorderLayout());

        addButton.setText("Add...");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout definitionControlPanelLayout = new javax.swing.GroupLayout(definitionControlPanel);
        definitionControlPanel.setLayout(definitionControlPanelLayout);
        definitionControlPanelLayout.setHorizontalGroup(
            definitionControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(definitionControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addButton)
                .addContainerGap(682, Short.MAX_VALUE))
        );
        definitionControlPanelLayout.setVerticalGroup(
            definitionControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, definitionControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(definitionControlPanel, java.awt.BorderLayout.SOUTH);

        modifyButton.setText("Modify...");
        modifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyButtonActionPerformed(evt);
            }
        });

        removeDefButton.setText("Remove");
        removeDefButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDefButtonActionPerformed(evt);
            }
        });

        moveUpDefButton.setText("Up");
        moveUpDefButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpDefButtonActionPerformed(evt);
            }
        });

        moveDownDefButton.setText("Down");
        moveDownDefButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownDefButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout definitionControlSidePanelLayout = new javax.swing.GroupLayout(definitionControlSidePanel);
        definitionControlSidePanel.setLayout(definitionControlSidePanelLayout);
        definitionControlSidePanelLayout.setHorizontalGroup(
            definitionControlSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(definitionControlSidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(definitionControlSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(moveUpDefButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(moveDownDefButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(modifyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeDefButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        definitionControlSidePanelLayout.setVerticalGroup(
            definitionControlSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(definitionControlSidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(moveUpDefButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveDownDefButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(modifyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeDefButton)
                .addContainerGap(343, Short.MAX_VALUE))
        );

        add(definitionControlSidePanel, java.awt.BorderLayout.WEST);

        definitionControlSplitPane.setDividerLocation(400);

        itemDefinitionsTable.setModel(defsModel);
        itemDefinitionsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        itemDefinitionsScrollPane.setViewportView(itemDefinitionsTable);

        definitionControlSplitPane.setLeftComponent(itemDefinitionsScrollPane);

        itemDefinitionPropertyTable.setModel(detailModel);
        itemDefinitionPropertyScrollPanel.setViewportView(itemDefinitionPropertyTable);

        definitionControlSplitPane.setRightComponent(itemDefinitionPropertyScrollPanel);

        add(definitionControlSplitPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        FrameModuleApi frameModule = application.getModuleRepository().getModuleByInterface(FrameModuleApi.class);
        CatalogSpecDefEditorPanel panel = new CatalogSpecDefEditorPanel();
        panel.setApplication(application);
        panel.setCatalog(catalog);
        panel.setSpec((XBCSpec) catalogItem);
        panel.setDefItem(new CatalogDefsTableItem());
        DefaultControlPanel controlPanel = new DefaultControlPanel();
        final DialogWrapper dialog = frameModule.createDialog(panel, controlPanel);
        frameModule.setDialogTitle(dialog, panel.getResourceBundle());
        controlPanel.setHandler((DefaultControlHandler.ControlActionType actionType) -> {
            if (actionType == DefaultControlHandler.ControlActionType.OK) {
                long maxXbIndex = 0;
                if (defsModel.getRowCount() > 0) {
                    CatalogDefsTableItem defItem = defsModel.getRowItem(defsModel.getRowCount() - 1);
                    if (defItem.getXbIndex() >= maxXbIndex) {
                        maxXbIndex = defItem.getXbIndex() + 1;
                    }
                }

                CatalogDefsTableItem defItem = panel.getDefItem();
                if (defItem == null) {
                    JOptionPane.showMessageDialog(this, "Target type is required", "Set is not allowed", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                defItem.setXbIndex(maxXbIndex);
                if (!updateList.contains(defItem)) {
                    updateList.add(defItem);
                }

                defsModel.addDefs(defItem);
                defsModel.fireTableDataChanged();
                updateItemStatus();
            }
            dialog.close();
        });
        dialog.showCentered(this);
        dialog.dispose();
    }//GEN-LAST:event_addButtonActionPerformed

    private void modifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyButtonActionPerformed
        int selectedRow = itemDefinitionsTable.getSelectedRow();
        CatalogDefsTableItem row = defsModel.getRowItem(selectedRow);

        FrameModuleApi frameModule = application.getModuleRepository().getModuleByInterface(FrameModuleApi.class);
        CatalogSpecDefEditorPanel panel = new CatalogSpecDefEditorPanel();
        panel.setApplication(application);
        panel.setCatalog(catalog);
        panel.setSpec((XBCSpec) catalogItem);
        panel.setDefItem(row);
        DefaultControlPanel controlPanel = new DefaultControlPanel();
        final DialogWrapper dialog = frameModule.createDialog(panel, controlPanel);
        frameModule.setDialogTitle(dialog, panel.getResourceBundle());
        controlPanel.setHandler((DefaultControlHandler.ControlActionType actionType) -> {
            if (actionType == DefaultControlHandler.ControlActionType.OK) {
                CatalogDefsTableItem defItem = panel.getDefItem();
                if (defItem == null) {
                    JOptionPane.showMessageDialog(this, "Target type is required", "Set is not allowed", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (!updateList.contains(defItem)) {
                    updateList.add(defItem);
                }

                updateItemStatus();
            }
            dialog.close();
        });
        dialog.showCentered(this);
        dialog.dispose();
    }//GEN-LAST:event_modifyButtonActionPerformed

    private void removeDefButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDefButtonActionPerformed
        int selectedRow = itemDefinitionsTable.getSelectedRow();
        CatalogDefsTableItem defItem = defsModel.getRowItem(selectedRow);

        if (updateList.contains(defItem)) {
            updateList.remove(defItem);
        }

        removeList.add(defItem);
        defsModel.getDefs().remove(defItem);
        defsModel.fireTableDataChanged();
        updateItemStatus();
    }//GEN-LAST:event_removeDefButtonActionPerformed

    private void moveUpDefButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpDefButtonActionPerformed
        int selectedRow = itemDefinitionsTable.getSelectedRow();

        CatalogDefsTableItem specDef = defsModel.getRowItem(selectedRow);
        if (!updateList.contains(specDef)) {
            updateList.add(specDef);
        }
        CatalogDefsTableItem targetSpecDef = defsModel.getRowItem(selectedRow - 1);
        if (!updateList.contains(targetSpecDef)) {
            updateList.add(targetSpecDef);
        }

        defsModel.moveItemDown(selectedRow - 1);
        updateItemStatus();

        itemDefinitionsTable.setRowSelectionInterval(selectedRow - 1, selectedRow - 1);
    }//GEN-LAST:event_moveUpDefButtonActionPerformed

    private void moveDownDefButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownDefButtonActionPerformed
        int selectedRow = itemDefinitionsTable.getSelectedRow();

        CatalogDefsTableItem specDef = defsModel.getRowItem(selectedRow);
        if (!updateList.contains(specDef)) {
            updateList.add(specDef);
        }
        CatalogDefsTableItem targetSpecDef = defsModel.getRowItem(selectedRow + 1);
        if (!updateList.contains(targetSpecDef)) {
            updateList.add(targetSpecDef);
        }

        defsModel.moveItemDown(selectedRow);
        updateItemStatus();
        itemDefinitionsTable.setRowSelectionInterval(selectedRow + 1, selectedRow + 1);
    }//GEN-LAST:event_moveDownDefButtonActionPerformed

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        WindowUtils.invokeDialog(new CatalogItemEditDefinitionPanel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel definitionControlPanel;
    private javax.swing.JPanel definitionControlSidePanel;
    private javax.swing.JSplitPane definitionControlSplitPane;
    private javax.swing.JScrollPane itemDefinitionPropertyScrollPanel;
    private javax.swing.JTable itemDefinitionPropertyTable;
    private javax.swing.JScrollPane itemDefinitionsScrollPane;
    private javax.swing.JTable itemDefinitionsTable;
    private javax.swing.JButton modifyButton;
    private javax.swing.JButton moveDownDefButton;
    private javax.swing.JButton moveUpDefButton;
    private javax.swing.JButton removeDefButton;
    // End of variables declaration//GEN-END:variables

    public void persist() {
        for (CatalogDefsTableItem defItem : updateList) {
            XBCXNameService nameService = catalog.getCatalogService(XBCXNameService.class);
            XBCXDescService descService = catalog.getCatalogService(XBCXDescService.class);
            XBCXStriService striService = catalog.getCatalogService(XBCXStriService.class);

            XBESpecDef specDef = (XBESpecDef) defItem.getSpecDef();
            if (specDef != null && specDef.getType() != defItem.getDefType()) {
                specService.removeSpecDef(specDef);
                specDef = null;
            }

            if (specDef == null) {
                specDef = (XBESpecDef) specService.createSpecDef((XBCSpec) catalogItem, defItem.getDefType());
            }

            specDef.setXBIndex(defItem.getXbIndex());
            specDef.setTargetRev((XBERev) defItem.getTarget());

            specService.persistSpecDef(specDef);

            ((XBEXNameService) nameService).setDefaultText(specDef, defItem.getName());
            ((XBEXDescService) descService).setDefaultText(specDef, defItem.getDescription());
            ((XBEXStriService) striService).setItemStringIdText(specDef, defItem.getStringId());
        }

        for (CatalogDefsTableItem defItem : removeList) {
            if (defItem.getSpecDef() != null) {
                specService.removeItemDepth(defItem.getSpecDef());
            }
        }
    }

    private void updateItemStatus() {
        int selectedRow = itemDefinitionsTable.getSelectedRow();
        int rowsCount = defsModel.getRowCount();
        if ((selectedRow >= 0) && (selectedRow < rowsCount)) {
            moveUpDefButton.setEnabled(selectedRow > 0);
            moveDownDefButton.setEnabled(selectedRow < rowsCount - 1);
            modifyButton.setEnabled(true);
            removeDefButton.setEnabled(true);
        } else {
            moveUpDefButton.setEnabled(false);
            moveDownDefButton.setEnabled(false);
            modifyButton.setEnabled(false);
            removeDefButton.setEnabled(false);
        }
        itemDefinitionsTable.repaint();
    }

    public void setCatalogItem(XBCItem catalogItem) {
        this.catalogItem = catalogItem;
        addButton.setEnabled(!(catalogItem instanceof XBCNode));
        defsModel.setCatalogItem(catalogItem);
        updateList = new ArrayList<>();
        removeList = new ArrayList<>();
        updateItemStatus();
    }

    public XBCItem getCatalogItem() {
        return catalogItem;
    }

    public XBACatalog getCatalog() {
        return catalog;
    }

    public void setCatalog(XBACatalog catalog) {
        this.catalog = catalog;
        specService = catalog.getCatalogService(XBCSpecService.class);
        defsModel.setCatalog(catalog);
    }

    public CatalogDefsTableModel getDefsModel() {
        return defsModel;
    }
}
