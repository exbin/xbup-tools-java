/*
 * Copyright (C) ExBin Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exbin.framework.editor.wave.options.gui;

import java.util.ResourceBundle;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Control;
import javax.sound.sampled.Line;
import javax.sound.sampled.Mixer;
import org.exbin.framework.App;
import org.exbin.framework.editor.wave.options.impl.AudioDevicesOptionsImpl;
import org.exbin.framework.language.api.LanguageModuleApi;
import org.exbin.framework.utils.WindowUtils;
import org.exbin.framework.options.api.OptionsModifiedListener;
import org.exbin.framework.options.api.OptionsComponent;
import org.exbin.framework.utils.TestApplication;
import org.exbin.framework.utils.UtilsModule;

/**
 * Panel for choosing input and output audio devices.
 *
 * @author ExBin Project (https://exbin.org)
 */
@ParametersAreNonnullByDefault
public class AudioDevicesOptionsPanel extends javax.swing.JPanel implements OptionsComponent<AudioDevicesOptionsImpl> {

    private final ResourceBundle resourceBundle = App.getModule(LanguageModuleApi.class).getBundle(AudioDevicesOptionsPanel.class);

    @SuppressWarnings("unchecked")
    public AudioDevicesOptionsPanel() {
        initComponents();
        init();
    }

    private void init() {
        // loop through all mixers, and all source and target lines within each mixer.
        Mixer.Info[] mis = AudioSystem.getMixerInfo();
        for (Mixer.Info mi : mis) {
            Mixer mixer = AudioSystem.getMixer(mi);
            // e.g. com.sun.media.sound.DirectAudioDevice
//            System.out.println("mixer: " + mixer.getClass().getName());
            Line.Info[] lis = mixer.getSourceLineInfo();
            for (Line.Info li : lis) {
//                System.out.println("    source line: " + li.toString());
//                showFormats(li);
            }
            lis = mixer.getTargetLineInfo();
            outputSoundDeviceComboBox.addItem(mixer.getMixerInfo().getName());
            for (Line.Info li : lis) {
                Mixer.Info mixerInfo = mixer.getMixerInfo();
//                System.out.println("    target line: " + li.toString());
/*                if (mixer instanceof DirectAudioDevice) {
                    jComboBox4.addItem(mixer.getMixerInfo().getName());
                } else { */
//                    jComboBox4.addItem(mixer.getMixerInfo().getName() + " (" + li.toString() + ")");
//                }
//                showFormats(li);
            }
            Control[] cs = mixer.getControls();
            for (Control c : cs) {
                System.out.println("    control: " + c.toString());
            }
        }
    }

    @Nonnull
    @Override
    public ResourceBundle getResourceBundle() {
        return resourceBundle;
    }

    @Override
    public void loadFromOptions(AudioDevicesOptionsImpl options) {
        // options.
    }

    @Override
    public void saveToOptions(AudioDevicesOptionsImpl options) {
        // options.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        audioOutputPanel = new javax.swing.JPanel();
        outputSoundDeviceLabel = new javax.swing.JLabel();
        outputSampleRateLabel = new javax.swing.JLabel();
        outputBufferSizeLabel = new javax.swing.JLabel();
        outputSoundDeviceComboBox = new javax.swing.JComboBox<>();
        outputSampleRateComboBox = new javax.swing.JComboBox<>();
        javax.swing.JComboBox<String> outputBufferSizeComboBox = new javax.swing.JComboBox<>();
        testAudioButton = new javax.swing.JButton();

        setAutoscrolls(true);

        audioOutputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceBundle.getString("audioOutputPanel.border.title"))); // NOI18N
        audioOutputPanel.setName("audioOutputPanel"); // NOI18N

        outputSoundDeviceLabel.setText(resourceBundle.getString("outputSoundDeviceLabel.text")); // NOI18N
        outputSoundDeviceLabel.setName("outputSoundDeviceLabel"); // NOI18N

        outputSampleRateLabel.setText(resourceBundle.getString("outputSampleRateLabel.text")); // NOI18N
        outputSampleRateLabel.setName("outputSampleRateLabel"); // NOI18N

        outputBufferSizeLabel.setText(resourceBundle.getString("outputBufferSizeLabel.text")); // NOI18N
        outputBufferSizeLabel.setName("outputBufferSizeLabel"); // NOI18N

        outputSoundDeviceComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<default>" }));
        outputSoundDeviceComboBox.setName("outputSoundDeviceComboBox"); // NOI18N

        outputSampleRateComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<default>" }));
        outputSampleRateComboBox.setName("outputSampleRateComboBox"); // NOI18N

        outputBufferSizeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<default>" }));
        outputBufferSizeComboBox.setName("outputBufferSizeComboBox"); // NOI18N

        testAudioButton.setText(resourceBundle.getString("testAudioButton.text")); // NOI18N
        testAudioButton.setName("testAudioButton"); // NOI18N

        javax.swing.GroupLayout audioOutputPanelLayout = new javax.swing.GroupLayout(audioOutputPanel);
        audioOutputPanel.setLayout(audioOutputPanelLayout);
        audioOutputPanelLayout.setHorizontalGroup(
            audioOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(audioOutputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(audioOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(audioOutputPanelLayout.createSequentialGroup()
                        .addGroup(audioOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(outputSoundDeviceLabel)
                            .addComponent(outputSampleRateLabel)
                            .addComponent(outputBufferSizeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(audioOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(outputSampleRateComboBox, 0, 347, Short.MAX_VALUE)
                            .addComponent(outputSoundDeviceComboBox, 0, 347, Short.MAX_VALUE)
                            .addComponent(outputBufferSizeComboBox, 0, 347, Short.MAX_VALUE)))
                    .addComponent(testAudioButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        audioOutputPanelLayout.setVerticalGroup(
            audioOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(audioOutputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(audioOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputSoundDeviceLabel)
                    .addComponent(outputSoundDeviceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(audioOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputSampleRateLabel)
                    .addComponent(outputSampleRateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(audioOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputBufferSizeLabel)
                    .addComponent(outputBufferSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(testAudioButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(audioOutputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(audioOutputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Test method for this panel.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        TestApplication testApplication = UtilsModule.createTestApplication();
        testApplication.launch(() -> {
            testApplication.addModule(org.exbin.framework.language.api.LanguageModuleApi.MODULE_ID, new org.exbin.framework.language.api.utils.TestLanguageModule());
            WindowUtils.invokeWindow(new AudioDevicesOptionsPanel());
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JPanel audioOutputPanel;
    public javax.swing.JLabel outputBufferSizeLabel;
    public javax.swing.JComboBox<String> outputSampleRateComboBox;
    public javax.swing.JLabel outputSampleRateLabel;
    public javax.swing.JComboBox<String> outputSoundDeviceComboBox;
    public javax.swing.JLabel outputSoundDeviceLabel;
    public javax.swing.JButton testAudioButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setOptionsModifiedListener(OptionsModifiedListener listener) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }
}
